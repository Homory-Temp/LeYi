//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StoreEntity : DbContext
    {
        public StoreEntity()
            : base("name=StoreEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<StoreCatalog> StoreCatalog { get; set; }
        public virtual DbSet<StoreConsume> StoreConsume { get; set; }
        public virtual DbSet<StoreConsumeSingle> StoreConsumeSingle { get; set; }
        public virtual DbSet<StoreDictionary> StoreDictionary { get; set; }
        public virtual DbSet<StoreFlow> StoreFlow { get; set; }
        public virtual DbSet<StoreFlowSingle> StoreFlowSingle { get; set; }
        public virtual DbSet<StoreIn> StoreIn { get; set; }
        public virtual DbSet<StoreInSingle> StoreInSingle { get; set; }
        public virtual DbSet<StoreLend> StoreLend { get; set; }
        public virtual DbSet<StoreLendSingle> StoreLendSingle { get; set; }
        public virtual DbSet<StoreObject> StoreObject { get; set; }
        public virtual DbSet<StoreOut> StoreOut { get; set; }
        public virtual DbSet<StoreOutSingle> StoreOutSingle { get; set; }
        public virtual DbSet<StoreReturn> StoreReturn { get; set; }
        public virtual DbSet<StoreReturnSingle> StoreReturnSingle { get; set; }
        public virtual DbSet<StoreRole> StoreRole { get; set; }
        public virtual DbSet<StoreTarget> StoreTarget { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<DepartmentUser> DepartmentUser { get; set; }
        public virtual DbSet<UserOnline> UserOnline { get; set; }
        public virtual DbSet<Store_Creator> Store_Creator { get; set; }
        public virtual DbSet<Store_Visitor> Store_Visitor { get; set; }
        public virtual DbSet<Store_User> Store_User { get; set; }
        public virtual DbSet<Store_Target> Store_Target { get; set; }
        public virtual DbSet<Store_ObjectThumb> Store_ObjectThumb { get; set; }
        public virtual DbSet<Store_RecordIn> Store_RecordIn { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Store_In> Store_In { get; set; }
        public virtual DbSet<StoreStatistics> StoreStatistics { get; set; }
        public virtual DbSet<Store_ST> Store_ST { get; set; }
        public virtual DbSet<StoreUse> StoreUse { get; set; }
        public virtual DbSet<StoreUseSingle> StoreUseSingle { get; set; }
        public virtual DbSet<Store_LC> Store_LC { get; set; }
        public virtual DbSet<Store_Use> Store_Use { get; set; }
        public virtual DbSet<Store_UseSingle> Store_UseSingle { get; set; }
    
        public virtual ObjectResult<string> ToPinYin(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ToPinYin", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountObjects(Nullable<System.Guid> catalogId, Nullable<System.Guid> storeId)
        {
            var catalogIdParameter = catalogId.HasValue ?
                new ObjectParameter("CatalogId", catalogId) :
                new ObjectParameter("CatalogId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountObjects", catalogIdParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<string> GetCatalogPath(Nullable<System.Guid> catalogId)
        {
            var catalogIdParameter = catalogId.HasValue ?
                new ObjectParameter("CatalogId", catalogId) :
                new ObjectParameter("CatalogId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCatalogPath", catalogIdParameter);
        }
    }
}
