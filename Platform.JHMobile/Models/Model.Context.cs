//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Platform.JHMobile.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class C6Entities : DbContext
    {
        public C6Entities()
            : base("name=C6Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<待阅信息列表_Result> 待阅信息列表_Result { get; set; }
    
        public virtual ObjectResult<Nullable<int>> 未阅寻呼数量(string loginCode)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("未阅寻呼数量", loginCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> 待办事项数量(string loginCode)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("待办事项数量", loginCodeParameter);
        }
    
        public virtual ObjectResult<未阅寻呼列表_Result> 未阅寻呼列表(string loginCode)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<未阅寻呼列表_Result>("未阅寻呼列表", loginCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> 待阅信息数量(string loginCode, string moduleType)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("待阅信息数量", loginCodeParameter, moduleTypeParameter);
        }
    
        public virtual ObjectResult<待阅信息列表_Result> 待阅信息列表(string loginCode, string moduleType)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<待阅信息列表_Result>("待阅信息列表", loginCodeParameter, moduleTypeParameter);
        }
    
        public virtual ObjectResult<待阅信息列表_Result> 待阅信息列表(string loginCode, string moduleType, MergeOption mergeOption)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<待阅信息列表_Result>("待阅信息列表", mergeOption, loginCodeParameter, moduleTypeParameter);
        }
    
        public virtual int 未阅寻呼已阅(Nullable<int> callNoSeeId)
        {
            var callNoSeeIdParameter = callNoSeeId.HasValue ?
                new ObjectParameter("CallNoSeeId", callNoSeeId) :
                new ObjectParameter("CallNoSeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("未阅寻呼已阅", callNoSeeIdParameter);
        }
    
        public virtual ObjectResult<未阅寻呼附件_Result> 未阅寻呼附件(string callID)
        {
            var callIDParameter = callID != null ?
                new ObjectParameter("CallID", callID) :
                new ObjectParameter("CallID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<未阅寻呼附件_Result>("未阅寻呼附件", callIDParameter);
        }
    
        public virtual ObjectResult<待阅信息详情_Result> 待阅信息详情(Nullable<int> messageId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<待阅信息详情_Result>("待阅信息详情", messageIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> 待阅信息已阅(Nullable<int> messageId, string userId, Nullable<bool> commitRead)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var commitReadParameter = commitRead.HasValue ?
                new ObjectParameter("CommitRead", commitRead) :
                new ObjectParameter("CommitRead", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("待阅信息已阅", messageIdParameter, userIdParameter, commitReadParameter);
        }
    
        public virtual ObjectResult<待办事项列表_Result> 待办事项列表(string loginCode)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<待办事项列表_Result>("待办事项列表", loginCodeParameter);
        }
    
        public virtual ObjectResult<待办事项详情_Result> 待办事项详情(string loginCode, Nullable<int> approveId)
        {
            var loginCodeParameter = loginCode != null ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(string));
    
            var approveIdParameter = approveId.HasValue ?
                new ObjectParameter("ApproveId", approveId) :
                new ObjectParameter("ApproveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<待办事项详情_Result>("待办事项详情", loginCodeParameter, approveIdParameter);
        }
    }
}
